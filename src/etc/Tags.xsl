<?xml version="1.0" encoding="UTF-8" ?>

<!--**************************************************************************
 *                                                                           *
 *  Copyright (c) 2001-2004 by TIANI MEDGRAPH AG                             *
 *                                                                           *
 *  This file is part of dcm4che.                                            *
 *                                                                           *
 *  This library is free software; you can redistribute it and/or modify it  *
 *  under the terms of the GNU Lesser General Public License as published    *
 *  by the Free Software Foundation; either version 2 of the License, or     *
 *  (at your option) any later version.                                      *
 *                                                                           *
 *  This library is distributed in the hope that it will be useful, but      *
 *  WITHOUT ANY WARRANTY; without even the implied warranty of               *
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU        *
 *  Lesser General Public License for more details.                          *
 *                                                                           *
 *  You should have received a copy of the GNU Lesser General Public         *
 *  License along with this library; if not, write to the Free Software      *
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA  *
 *                                                                           *
 ***************************************************************************-->

<!-- $Id: Tags.xsl 4114 2007-06-25 23:08:27Z gunterze $ -->

<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:output method="text"/>

<xsl:template match="/">
<xsl:text>
/*****************************************************************************
 *                                                                           *
 *  Copyright (c) 2001-2004 by TIANI MEDGRAPH AG                             *
 *                                                                           *
 *  This file is part of dcm4che.                                            *
 *                                                                           *
 *  This library is free software; you can redistribute it and/or modify it  *
 *  under the terms of the GNU Lesser General Public License as published    *
 *  by the Free Software Foundation; either version 2 of the License, or     *
 *  (at your option) any later version.                                      *
 *                                                                           *
 *  This library is distributed in the hope that it will be useful, but      *
 *  WITHOUT ANY WARRANTY; without even the implied warranty of               *
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU        *
 *  Lesser General Public License for more details.                          *
 *                                                                           *
 *  You should have received a copy of the GNU Lesser General Public         *
 *  License along with this library; if not, write to the Free Software      *
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA  *
 *                                                                           *
 *****************************************************************************
 *  This file was automatically generated by XSLT from                       *
 *  src/etc/dictionary.xml applying stylesheet src/etc/Tags.xsl.             *
 *  Manually modifications will be lost with next auto generation. For       *
 *  permanent modification edit the XML source or/and the XSL stylesheet.    *
 *****************************************************************************/

package org.dcm4che.dict;

/** Provides tag constants.
 *
 * @author gunter zeilinger
 * @version 1.0.22
 */
public class Tags {

    private static final char[] HEX_DIGIT = { '0', '1', '2', '3', '4', '5',
            '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};

    /** Private constructor */
    private Tags() {
    }
    
    public static boolean isPrivate(int tag) {
        return (tag &amp; 0x00010000) != 0;
    }
    
    public static boolean isPrivateCreatorDataElement(int tag) {
        return (tag &amp; 0x00010000) != 0 &amp;&amp; (tag &amp; 0x0000ff00) == 0;
    }

    public static StringBuffer toHexString(StringBuffer sb, int v, int l) {
		for (int i = l; --i >= 0;)
		    sb.append(HEX_DIGIT[(v >>> (i &lt;&lt; 2)) &amp; 0xf]);
        return sb;
    }

    public static final int groupOf(int tag) {
        return (tag >>> 16);
    }
    
    public static final int elementOf(int tag) {
        return (tag &amp; 0xffff);
    }
    
    public static final int valueOf(short grTag, short elTag) {
        return (grTag &lt;&lt; 16) | (elTag &amp; 0xffff);
    }

    public static final int forName(String name) {
       try {
          return Tags.class.getField(name).getInt(null);
       } catch (IllegalAccessException e) {
          throw new Error(e);
       } catch (NoSuchFieldException e) {
          throw new IllegalArgumentException("Unkown Tag Name: " + name);
       }
    }

    public static String toHexString(int v, int l) {
        return toHexString(new StringBuffer(l),v,l).toString();
    }

    public static StringBuffer toString(StringBuffer sb, int tag) {
        sb.append('(');
        toHexString(sb, tag >>> 16, 4).append(',');
        toHexString(sb, tag &amp; 0xffff, 4).append(')');
        return sb;        
    }

    public static String toString(int tag) {
        return toString(new StringBuffer(11),tag).toString();
    }
    
    public static int valueOf(String s) {
        char[] a = s.toCharArray();
        if (a.length != 11 || a[0] != '(' || a[5] != ',' || a[10] != ')') {
            return -1;
        }
        int d1 = digit(a[1]);
        int d2 = digit(a[2]);
        int d3 = digit(a[3]);
        int d4 = digit(a[4]);
        int d5 = digit(a[6]);
        int d6 = digit(a[7]);
        int d7 = digit(a[8]);
        int d8 = digit(a[9]);
        if ((d1 | d2 | d3 | d4 | d5 | d6 | d7 | d8) &lt; 0) {
            return -1;
        }
        return (d1 &lt;&lt; 28)
            | (d2 &lt;&lt; 24)
            | (d3 &lt;&lt; 20)
            | (d4 &lt;&lt; 16)
            | (d5 &lt;&lt; 12)
            | (d6 &lt;&lt; 8)
            | (d7 &lt;&lt; 4)
            | (d8 &lt;&lt; 0);
    }

    private static int digit(char c) {
        return (c >= '0' &amp;&amp; c &lt;= '9') ? (c - '0')
            : (c >= 'A' &amp;&amp; c &lt;= 'F') ? (c - 'A' + 10)
            : (c >= 'a' &amp;&amp; c &lt;= 'f') ? (c - 'a' + 10)
            : -1;
    }

</xsl:text>
<xsl:apply-templates select="dictionary/elements/element"/>
<xsl:text>}</xsl:text>
</xsl:template>

<xsl:template match="element">
<xsl:text>    /** </xsl:text><xsl:value-of select="@tag"/>
<xsl:text> VR=</xsl:text><xsl:value-of select="@vr"/>
<xsl:text> </xsl:text><xsl:value-of select="@name"/>
<xsl:text> */
    public static final int </xsl:text><xsl:value-of select="@key"/>
<xsl:text> = 0x</xsl:text>
<xsl:value-of select="translate(substring(@tag,2,4),'x0123456789ABCDEF','00123456789ABCDEF')"/>
<xsl:value-of select="translate(substring(@tag,7,4),'x0123456789ABCDEF','00123456789ABCDEF')"/>
<xsl:text>;

</xsl:text>
</xsl:template>

</xsl:stylesheet>