<?xml version="1.0" encoding="UTF-8" ?>

<!--**************************************************************************
 *                                                                           *
 *  Copyright (c) 2001,2002 by TIANI MEDGRAPH AG                             *
 *                                                                           *
 *  This file is part of dcm4che.                                            *
 *                                                                           *
 *  This library is free software; you can redistribute it and/or modify it  *
 *  under the terms of the GNU Lesser General Public License as published    *
 *  by the Free Software Foundation; either version 2 of the License, or     *
 *  (at your option) any later version.                                      *
 *                                                                           *
 *  This library is distributed in the hope that it will be useful, but      *
 *  WITHOUT ANY WARRANTY; without even the implied warranty of               *
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU        *
 *  Lesser General Public License for more details.                          *
 *                                                                           *
 *  You should have received a copy of the GNU Lesser General Public         *
 *  License along with this library; if not, write to the Free Software      *
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA  *
 *                                                                           *
 ***************************************************************************-->

<!-- $Id -->

<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:output method="text"/>

<xsl:template match="/">
<xsl:text>
/*****************************************************************************
 *                                                                           *
 *  Copyright (c) 2001,2002 by TIANI MEDGRAPH AG                             *
 *                                                                           *
 *  This file is part of dcm4che.                                            *
 *                                                                           *
 *  This library is free software; you can redistribute it and/or modify it  *
 *  under the terms of the GNU Lesser General Public License as published    *
 *  by the Free Software Foundation; either version 2 of the License, or     *
 *  (at your option) any later version.                                      *
 *                                                                           *
 *  This library is distributed in the hope that it will be useful, but      *
 *  WITHOUT ANY WARRANTY; without even the implied warranty of               *
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU        *
 *  Lesser General Public License for more details.                          *
 *                                                                           *
 *  You should have received a copy of the GNU Lesser General Public         *
 *  License along with this library; if not, write to the Free Software      *
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA  *
 *                                                                           *
 *****************************************************************************
 *  This file was automatically generated by XSLT from                       *
 *  src/etc/dictionary.xml applying stylesheet src/etc/VRMap.xsl.            *
 *  Manually modifications will be lost with next auto generation. For       *
 *  permanent modification edit the XML source or/and the XSL stylesheet.    *
 *****************************************************************************/

package org.dcm4che.dict;

/** Interface to map DICOM tags to VR constants.
 *
 * @author gunter zeilinger
 * @version 1.0.0
 */
public interface VRMap {

    public int lookup(int tag);

    public static final VRMap DEFAULT = new VRMap() {
        
        public int lookup(int tag) {
            if ((tag &amp; 0x0000ffff) == 0) {
                return VRs.UL;
            }
            switch (tag &amp; 0xffff0000) {
                case 0x00000000:
                    return vrOfCommand(tag);
                case 0x00020000:
                    return vrOfFileMetaInfo(tag);
                case 0x00040000:
                    return vrOfDicomDir(tag);
            }
            if ((tag &amp; 0x00010000) != 0) {
                return ((tag &amp; 0x0000ff00) == 0 ? VRs.LO : VRs.UN);
                /*
                if ((tag &amp; 0x0000ff00) == 0) return VRs.LO;
                else {
					int vr = vrOfData(tag);
					//System.out.println(Tags.toString(tag)+": "+VRs.toString(vr));
					return vr;
				}
				*/
            }
            return vrOfData(tag);
        }

        int vrOfCommand(int tag) {
            switch (tag) {
</xsl:text>
    <xsl:apply-templates select="dictionary/elements[@type = 'Command']"/>
<xsl:text>            }
            throw new IllegalArgumentException("Unrecognized Tag 0x"
                    + Integer.toHexString(tag));
        }
        
        int vrOfFileMetaInfo(int tag) {
            switch (tag) {
</xsl:text>
    <xsl:apply-templates select="dictionary/elements[@type = 'FileMetaInfo']"/>
<xsl:text>            }
            throw new IllegalArgumentException("Unrecognized Tag 0x"
                    + Integer.toHexString(tag));
        }
        
        int vrOfDicomDir(int tag) {
            switch (tag) {
</xsl:text>
    <xsl:apply-templates select="dictionary/elements[@type = 'DicomDir']"/>
<xsl:text>            }
            throw new IllegalArgumentException("Unrecognized Tag 0x"
                    + Integer.toHexString(tag));
        }
        
        int vrOfData(int tag) {
            switch (tag) {
</xsl:text>
    <xsl:apply-templates select="dictionary/elements[@type = 'Data']"/>
<xsl:text>            }
            switch (tag &amp; 0xFF00FFFF) {
</xsl:text>
    <xsl:apply-templates select="dictionary/elements[@type = 'Data']">
        <xsl:with-param name="mask" select="'(FF00,FFFF)'"/>
    </xsl:apply-templates>
<xsl:text>            }
            switch (tag &amp; 0xFFFFFF00) {
</xsl:text>
    <xsl:apply-templates select="dictionary/elements[@type = 'Data']">
        <xsl:with-param name="mask" select="'(FFFF,FF00)'"/>
    </xsl:apply-templates>
<xsl:text>            }
            return VRs.UN;
        }
    };
}        
</xsl:text>
</xsl:template>

<xsl:template match="elements">
    <xsl:param name="mask" select="'(FFFF,FFFF)'"/>

    <xsl:apply-templates select="element[starts-with(@vr, 'AE')][translate(@tag,'x0123456789ABCDEF','0FFFFFFFFFFFFFFFF') = $mask]">
        <xsl:with-param name="vr" select="'AE'"/>
    </xsl:apply-templates>
    <xsl:apply-templates select="element[starts-with(@vr, 'AS')][translate(@tag,'x0123456789ABCDEF','0FFFFFFFFFFFFFFFF') = $mask]">
        <xsl:with-param name="vr" select="'AS'"/>
    </xsl:apply-templates>
    <xsl:apply-templates select="element[starts-with(@vr, 'AT')][translate(@tag,'x0123456789ABCDEF','0FFFFFFFFFFFFFFFF') = $mask]">
        <xsl:with-param name="vr" select="'AT'"/>
    </xsl:apply-templates>
    <xsl:apply-templates select="element[starts-with(@vr, 'CS')][translate(@tag,'x0123456789ABCDEF','0FFFFFFFFFFFFFFFF') = $mask]">
        <xsl:with-param name="vr" select="'CS'"/>
    </xsl:apply-templates>
    <xsl:apply-templates select="element[starts-with(@vr, 'DA')][translate(@tag,'x0123456789ABCDEF','0FFFFFFFFFFFFFFFF') = $mask]">
        <xsl:with-param name="vr" select="'DA'"/>
    </xsl:apply-templates>
    <xsl:apply-templates select="element[starts-with(@vr, 'DS')][translate(@tag,'x0123456789ABCDEF','0FFFFFFFFFFFFFFFF') = $mask]">
        <xsl:with-param name="vr" select="'DS'"/>
    </xsl:apply-templates>
    <xsl:apply-templates select="element[starts-with(@vr, 'DT')][translate(@tag,'x0123456789ABCDEF','0FFFFFFFFFFFFFFFF') = $mask]">
        <xsl:with-param name="vr" select="'DT'"/>
    </xsl:apply-templates>
    <xsl:apply-templates select="element[starts-with(@vr, 'FD')][translate(@tag,'x0123456789ABCDEF','0FFFFFFFFFFFFFFFF') = $mask]">
        <xsl:with-param name="vr" select="'FD'"/>
    </xsl:apply-templates>
    <xsl:apply-templates select="element[starts-with(@vr, 'FL')][translate(@tag,'x0123456789ABCDEF','0FFFFFFFFFFFFFFFF') = $mask]">
        <xsl:with-param name="vr" select="'FL'"/>
    </xsl:apply-templates>
    <xsl:apply-templates select="element[starts-with(@vr, 'IS')][translate(@tag,'x0123456789ABCDEF','0FFFFFFFFFFFFFFFF') = $mask]">
        <xsl:with-param name="vr" select="'IS'"/>
    </xsl:apply-templates>
    <xsl:apply-templates select="element[starts-with(@vr, 'LO')][translate(@tag,'x0123456789ABCDEF','0FFFFFFFFFFFFFFFF') = $mask]">
        <xsl:with-param name="vr" select="'LO'"/>
    </xsl:apply-templates>
    <xsl:apply-templates select="element[starts-with(@vr, 'LT')][translate(@tag,'x0123456789ABCDEF','0FFFFFFFFFFFFFFFF') = $mask]">
        <xsl:with-param name="vr" select="'LT'"/>
    </xsl:apply-templates>
    <xsl:apply-templates select="element[starts-with(@vr, 'OB')][translate(@tag,'x0123456789ABCDEF','0FFFFFFFFFFFFFFFF') = $mask]">
        <xsl:with-param name="vr" select="'OB'"/>
    </xsl:apply-templates>
    <xsl:apply-templates select="element[starts-with(@vr, 'OF')][translate(@tag,'x0123456789ABCDEF','0FFFFFFFFFFFFFFFF') = $mask]">
        <xsl:with-param name="vr" select="'OF'"/>
    </xsl:apply-templates>
    <xsl:apply-templates select="element[starts-with(@vr, 'OW')][translate(@tag,'x0123456789ABCDEF','0FFFFFFFFFFFFFFFF') = $mask]">
        <xsl:with-param name="vr" select="'OW'"/>
    </xsl:apply-templates>
    <xsl:apply-templates select="element[starts-with(@vr, 'PN')][translate(@tag,'x0123456789ABCDEF','0FFFFFFFFFFFFFFFF') = $mask]">
        <xsl:with-param name="vr" select="'PN'"/>
    </xsl:apply-templates>
    <xsl:apply-templates select="element[starts-with(@vr, 'SH')][translate(@tag,'x0123456789ABCDEF','0FFFFFFFFFFFFFFFF') = $mask]">
        <xsl:with-param name="vr" select="'SH'"/>
    </xsl:apply-templates>
    <xsl:apply-templates select="element[starts-with(@vr, 'SL')][translate(@tag,'x0123456789ABCDEF','0FFFFFFFFFFFFFFFF') = $mask]">
        <xsl:with-param name="vr" select="'SL'"/>
    </xsl:apply-templates>
    <xsl:apply-templates select="element[starts-with(@vr, 'SQ')][translate(@tag,'x0123456789ABCDEF','0FFFFFFFFFFFFFFFF') = $mask]">
        <xsl:with-param name="vr" select="'SQ'"/>
    </xsl:apply-templates>
    <xsl:apply-templates select="element[starts-with(@vr, 'SS')][translate(@tag,'x0123456789ABCDEF','0FFFFFFFFFFFFFFFF') = $mask]">
        <xsl:with-param name="vr" select="'SS'"/>
    </xsl:apply-templates>
    <xsl:apply-templates select="element[starts-with(@vr, 'ST')][translate(@tag,'x0123456789ABCDEF','0FFFFFFFFFFFFFFFF') = $mask]">
        <xsl:with-param name="vr" select="'ST'"/>
    </xsl:apply-templates>
    <xsl:apply-templates select="element[starts-with(@vr, 'TM')][translate(@tag,'x0123456789ABCDEF','0FFFFFFFFFFFFFFFF') = $mask]">
        <xsl:with-param name="vr" select="'TM'"/>
    </xsl:apply-templates>
    <xsl:apply-templates select="element[starts-with(@vr, 'UC')][translate(@tag,'x0123456789ABCDEF','0FFFFFFFFFFFFFFFF') = $mask]">
        <xsl:with-param name="vr" select="'UC'"/>
    </xsl:apply-templates>
    <xsl:apply-templates select="element[starts-with(@vr, 'UI')][translate(@tag,'x0123456789ABCDEF','0FFFFFFFFFFFFFFFF') = $mask]">
        <xsl:with-param name="vr" select="'UI'"/>
    </xsl:apply-templates>
    <xsl:apply-templates select="element[starts-with(@vr, 'UL')][translate(@tag,'x0123456789ABCDEF','0FFFFFFFFFFFFFFFF') = $mask]">
        <xsl:with-param name="vr" select="'UL'"/>
    </xsl:apply-templates>
    <xsl:apply-templates select="element[starts-with(@vr, 'UN')][translate(@tag,'x0123456789ABCDEF','0FFFFFFFFFFFFFFFF') = $mask]">
        <xsl:with-param name="vr" select="'UN'"/>
    </xsl:apply-templates>
    <xsl:apply-templates select="element[starts-with(@vr, 'US')][translate(@tag,'x0123456789ABCDEF','0FFFFFFFFFFFFFFFF') = $mask]">
        <xsl:with-param name="vr" select="'US'"/>
    </xsl:apply-templates>
    <xsl:apply-templates select="element[starts-with(@vr, 'UT')][translate(@tag,'x0123456789ABCDEF','0FFFFFFFFFFFFFFFF') = $mask]">
        <xsl:with-param name="vr" select="'UT'"/>
    </xsl:apply-templates>
    <xsl:apply-templates select="element[starts-with(@vr, 'NONE')][translate(@tag,'x0123456789ABCDEF','0FFFFFFFFFFFFFFFF') = $mask]">
        <xsl:with-param name="vr" select="'NONE'"/>
    </xsl:apply-templates>
</xsl:template>

<xsl:template match="element">
    <xsl:param name="vr"/>
<xsl:text>                case Tags.</xsl:text><xsl:value-of select="@key"/>:
<xsl:if test="position() = last()">
<xsl:text>                    return VRs.</xsl:text>
<xsl:value-of select="$vr"/>;
</xsl:if>
</xsl:template>

</xsl:stylesheet>